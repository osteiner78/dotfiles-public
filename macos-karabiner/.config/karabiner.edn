{
:profiles {
    :Default {
        :default true
        :sim     25     ;; simultaneous key press threshold (def: 50)
                        ;; simlayer is implemented with to_if_alone and simultaneous key press feature
                        ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
        :delay   500    ;; to_delayed_action_delay_milliseconds (def: 500)
                       ;; checkout karabiner's documentation
                       ;; https://pqrs.org/osx/karabiner/json.html
                       ;; basically it means time after which the key press is count delayed

                        ;; after :delay ms, the key press is considered to be delayed
                        ;; (used for double-press macros)
        :alone   1000    ;; to_if_alone_timeout_milliseconds (def: 1000)
                        ;; https://pqrs.org/osx/karabiner/json.html#to-if-alone
                        ;; affects to_if_alone behavior
                        ;; simlayer is implemented with to_if_alone and simultaneous key press feature

                        ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
        :held    500    ;; to_if_held_down_threshold_milliseconds (def: 500)
                        ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
    }
} 
:devices{:apple-internal [{:vendor_id 1452 :product_id 834}] 
        :logitech [{:vendor_id 1133 :product_id 50475}] ;; Logitech MX Keys
}
:templates {    
        :activate "osascript -e 'tell application \"%s\" to activate'"
        :launch "open -a %s"
        ;; :openFinder "open \"/System/Library/CoreServices/Finder.app\"" ;; "openFinder" to switch to the Finder
        :notification "osascript -e 'display notification \"%s\" with title \"%s\"'"    ;; Display notification
        :show        "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
        ;; :yabai "/opt/homebrew/bin/yabai %s" ;; Should not need to specify full path, something wrong in $PATH definition
        :yabai "PATH=/run/current-system/sw/bin:/opt/homebrew/bin:/usr/local/bin:$PATH yabai %s"
                                                                                                ;; notifcation "text" "title"
}

:applications{
        :1password      ["^com\\.1password\\.1password$"]
        :arc            ["^company\\.thebrowser\\.Browser$"]
        :code           ["^com\\.visualstudio\\.code\\.oss$"
                        "^com\\.microsoft\\.VSCode(Insiders)?$"
                        "^com\\.microsoft\\.VSCode?$"]
        :finder         ["^com\\.apple\\.finder$"]
        :notes          ["^com\\.apple\\.Notes$"]
        :obsidian       ["^md\\.obsidian$"]
        :pdf            ["^com\\.readdle\\.PDFExpert-Mac$"]
        :safari         ["^com\\.apple\\.Safari$"]
        :sublime        ["^com\\.sublimetext\\.4$"]
        :things         ["^com\\.culturedcode\\.ThingsMac$"]
        :todoist        ["^com\\.todoist\\.mac\\.Todoist$"]
}

;; layers are basically "hyper" keys
;; press this in combination with something else and depending on your rule, make things happen
:layers {:hyper-mode {:key :caps_lock :alone {:key :escape}}    ;; make the caps_lock key the hyper key
                                                                ;; In "System Preferences/Keyboard/Modifier Keys..."
                                                                ;; the Caps Lock Key is set to "No Action".
         :yabai-mode {:key :tab}  ;; couldn't create yabai-mode using both left_control and left_shift
}    

;; simlayers are basically "hyper" keys
;; layers works too, but only recommended for non-typing keys like . or tab
;; or keys like z which are used less often
;; :simlayers {
;;          :yabai-mode {:key :z :modi {:mandatory [:left_control]} }
;;         ;;  :yabai-mode {:key :left_shift :modi {:mandatory :left_control}}    
;; }

:main [  
        ;; {:des "Caps Lock → Escape (if alone) | Caps Lock (simple)"
        ;;  CapsLock to Hyperkey:
        ;;  :rules [[:##caps_lock :!CTOleft_shift nil {:alone [:escape]}]]
        ;;  :rules [[:##caps_lock :caps_lock nil {:alone [:escape]}]]
        ;;  }
        {:des "Launch apps with hyperkey"
        :rules [:hyper-mode
                [:1 [:launch "/Applications/1Password.app"]]
                [:a [:launch "/Applications/Arc.app"]]
                [:c [:launch "/System/Applications/Calendar.app"]]
                [:d [:launch "/opt/homebrew/bin/dark-mode"]]
                ;; [:f ["open ~"]]
                ;; [:f ["open \"/System/Library/CoreServices/Finder.app\""]]
                [:f [:activate "/System/Library/CoreServices/Finder.app\""]]
                [:g [:launch "~/Applications/Gmail.app"]]
                [:h [:launch "/Applications/Things3.app"]]
                [:m [:launch "~/Applications/'Google Maps'.app"]]
                [:o [:launch "/Applications/Obsidian.app"]]
                [:p [:launch "/Applications/'PDF Expert'.app"]]
                ;; [:s [:launch "/Applications/Dash.app"]] ;; conflicts with universal sidebar
                ;; [:t [:launch "/Applications/iTerm.app"]]
                [:t [:launch "/Applications/WezTerm.app"]]
                [:grave_accent_and_tilde [:launch "/Applications/WezTerm.app"]]
                [:v [:launch "/Applications/'Visual Studio Code'.app"]]
                [:w [:launch "/Applications/Whatsapp.app"]]
                [:equal_sign [:launch "/Applications/'Soulver 3'.app"]]]}

        {:des "Home and End keys"
         :rules [
                [:home :!Cleft_arrow]
                [:end :!Cright_arrow]
                [:!Rhome :!CRleft_arrow]
                [:!Rend :!CRright_arrow]
                ]}

        {:des "Next/Previous tab"
         :rules [
                [:!Epage_up :!QRopen_bracket]
                [:!Epage_down :!QRclose_bracket]
                ]}

        {:des "Page Up/Page Down"
         :rules [:hyper-mode
                [:down_arrow :page_down]
                [:up_arrow :page_up]
                ]}

        {:des "left_command alone -> ⌘ + tab to last app"
         :rules [[:left_command :left_command nil {:alone :!Ctab}]]}

        {:des "Hyper+S: Universal sidebar toggle"
        :rules [:hyper-mode
                [:s :!CSd :1password]
                [:s :!Cs :arc]
                [:s :!Cb :code]
                [:s :!CTs :finder]
                [:s :!TSs :obsidian]
                [:s :!CSl :safari]
                [:s :!CO0 :pdf]
                [:s [:!Qk :!Qb] :sublime]
                [:s :!Cslash :things]    
                [:s :!COs :notes]
                ]}

        {:des "Hyper+space: Universal command palette"
        :rules [:hyper-mode
                [:spacebar :!Cl :arc]
                [:spacebar :!Cp :obsidian]
                [:spacebar :!QRp :code]
                [:spacebar :!QRp :sublime]
                [:spacebar :!Qk :todoist]
                ]}

        {:des "Hyper+{page_up/page_down}"
        :rules [:hyper-mode
                [:period :page_down]     
                [:comma :page_up]     
                ]}

;;              ============== YABAI RULES =================
                {:des "Yabai rules - Inside yabai layer (tab)"
        :rules[:yabai-mode
;;              Warp windows
                [:j [:yabai "-m window --warp south"]]
                [:k [:yabai "-m window --warp north"]]
                [:h [:yabai "-m window --warp west"]]
                [:l [:yabai "-m window --warp east"]]

;;              Roate layout clockwise
                [:r [:yabai "-m space --rotate 270"]]

;;              Flip along x or y-axis
                [:x [:yabai "-m space --mirror x-axis"]]
                [:y [:yabai "-m space --mirror y-axis"]]

;;              Balance out tree of windows (resize to occupy)
                [:e [:yabai "-m space --balance"]]
                
;;              Maximize window
                [:return_or_enter [:yabai "-m window --toggle zoom-fullscreen"]]

;;              Toggle window float
                [:t [:yabai "-m window --toggle float --grid 4:4:1:1:2:2"]]

;;              Toggle space layout (bsp/float)
                ;; [:!STv "/opt/homebrew/bin/yabai -m space --layout $(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "float" else "bsp" end')"]
                ;; [:!STv "/opt/homebrew/bin/yabai -m space --layout $(/opt/homebrew/bin/yabai -m query --spaces --space | jq -r 'if .type == 'bsp' then 'float' else 'bsp' end')"]

;;              Toggle paddings
                [:p [:yabai "-m space --toggle padding --toggle gap"]]

;;              ============== YABAI - SPACES NAVIGATION =================
;;              Move window to space #
                [:1 [:yabai "-m window --space 1 ; /opt/homebrew/bin/yabai -m space --focus 1"]]
                [:2 [:yabai "-m window --space 2 ; /opt/homebrew/bin/yabai -m space --focus 2"]]
                [:3 [:yabai "-m window --space 3 ; /opt/homebrew/bin/yabai -m space --focus 3"]]
                [:4 [:yabai "-m window --space 4 ; /opt/homebrew/bin/yabai -m space --focus 4"]]
                [:5 [:yabai "-m window --space 5 ; /opt/homebrew/bin/yabai -m space --focus 5"]]
                [:6 [:yabai "-m window --space 6 ; /opt/homebrew/bin/yabai -m space --focus 6"]]
                [:7 [:yabai "-m window --space 7 ; /opt/homebrew/bin/yabai -m space --focus 7"]]
                [:8 [:yabai "-m window --space 8 ; /opt/homebrew/bin/yabai -m space --focus 8"]]
                [:9 [:yabai "-m window --space 9 ; /opt/homebrew/bin/yabai -m space --focus 9"]]

;;              Move window to Previous and Next space #
                [:comma [:yabai "-m window --space prev ; /opt/homebrew/bin/yabai -m space --focus prev"]]
                [:period [:yabai "-m window --space next ; /opt/homebrew/bin/yabai -m space --focus next"]]

;;              Alternate to recent space
                [:x [:yabai "-m space --focus recent"]] ;; does not work
                [:m [:yabai "-m space --focus prev"]]
                [:slash [:yabai "-m space --focus next"]]

;;              ============== YABAI - DISPLAY NAVIGATION =================
;;              Move window to left and right display #
                [:open_bracket [:yabai "-m window --display west ; /opt/homebrew/bin/yabai -m display --focus west"]]
                [:close_bracket [:yabai "-m window --display east ; /opt/homebrew/bin/yabai -m display --focus east"]]

;;              ====================== YABAI - SYSTEM ======================
;;              Start/Stop yabai        
                ;; [:q [[:yabai "--stop-service"] [:notification "Stopped" "Yabai"]]]
                ;; [:q [[:notification "Stopped" "Yabai"] "/opt/homebrew/bin/yabai --stop-service"]] 
                [:q ["/opt/homebrew/bin/yabai --stop-service"]]
                ;; [:w [[:yabai "--start-service"] [:notification "Started" "Yabai"]]]
                [:w ["/opt/homebrew/bin/yabai --start-service"]]
                ;; [:v [["/opt/homebrew/bin/yabai w--restart-service"] [:notification "Retarted" "Yabai"]]]
]}

        {:des "Yabai rules - Outside yabai layer (tab)"
        :rules[
;;              ============== YABAI - WINDOWS NAVIGATION =================
;;              Change window focus within space - Alt/Option
                [:!Oj [:yabai "-m window --focus south"]]
                [:!Ok [:yabai "-m window --focus north"]]
                [:!Oh [:yabai "-m window --focus west"]]
                [:!Ol [:yabai "-m window --focus east"]]

;;              Move window and split - Ctrl+Alt
                [:!TOj [:yabai "-m window --swap south"]]
                [:!TOk [:yabai "-m window --swap north"]]
                [:!TOh [:yabai "-m window --swap west"]]
                [:!TOl [:yabai "-m window --swap east"]]

;;              ============== YABAI - DISPLAY NAVIGATION =================
;;              Change focus between external displays # - Control
                [:!Oopen_bracket [:yabai "-m display --focus west"]]
                [:!Oclose_bracket [:yabai "-m display --focus east"]]

;;              ====================== TEST ======================
                ; [:!F9 "echo $PATH >> ~/test.log"]
        ]}
]}


;; !  | means mandatory
;; #  | means optional
;; C  | left_command
;; T  | left_control
;; O  | left_option
;; S  | left_shift
;; F  | fn
;; Q  | right_command
;; W  | right_control
;; E  | right_option
;; R  | right_shift
;; P  | caps_lock
;; !! | command + control + optional + shift (hyper)
;; ## | optional any
