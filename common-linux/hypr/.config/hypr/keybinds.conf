###################
### KEYBINDINGS ###
###################

# See https://wiki.hyprland.org/Configuring/Keywords/
$mainMod = SUPER
$HYPER = MOD3

# --- Launchers ---
# $browser = flatpak run app.zen_browser.zen
$browser = firefox
$fileManager = thunar
$CHROMIUM = /usr/lib64/chromium-browser/chromium-browser.sh --profile-directory=Default

# Reusable: quick class-exists check
$GREP = hyprctl clients | grep -qE

# ---- APP IDs (single source of truth) ----
$APPID_GCALENDAR    = kjbdgfilnfhdoflbpgamdcdgpehopbep
$APPID_GMAIL        = fmgjjmmmlfnkbppncabfkddbjimcfncm
$APPID_GMAPS        = mnhkaebcjjhencmpkapnbdaogjamfbcj
$APPID_PAPERLESS    = iibhdbailckdjjikafofclhkhaejamgp
$APPID_TODOIST      = dlgohinmglaoopaiplliaecdpmnepmga
$APPID_WHATSAPP     = hnpfjngllnobngcgfapefoaidbinmjnm
$APPID_GEMINI       = caidcmannjgahlnbpmidmiecjcoiiigg
$APPID_CHATGPT      = cadlkienfkclaiaibeoongdcgmdikeeg

# ========================= APPS (WITH HYPER) ==============================
# Regular apps
bind = $HYPER, 1, exec, 1password --enable-features=UseOzonePlatform --ozone-platform=wayland
bind = $HYPER, q, exec, $terminal
bind = $HYPER, a, exec, sh -lc "$GREP 'class:[[:space:]]*zen$' && hyprctl dispatch focuswindow class:zen || $browser"
bind = $HYPER, f, exec, $fileManager
bind = $HYPER, v, exec, sh -lc "$GREP 'class:[[:space:]]*code$' && hyprctl dispatch focuswindow class:code || code --enable-features=UseOzonePlatform --ozone-platform=wayland"

# Chromium apps (focus class if present, else launch)
bind = $HYPER, c, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_GCALENDAR-'  && hyprctl dispatch focuswindow 'class:^chrome-$APPID_GCALENDAR-.*$'    || $CHROMIUM --app-id=$APPID_GCALENDAR"
bind = $HYPER, g, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_GMAIL-'      && hyprctl dispatch focuswindow 'class:^chrome-$APPID_GMAIL-.*$'        || $CHROMIUM --app-id=$APPID_GMAIL"
bind = $HYPER, m, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_GMAPS-'      && hyprctl dispatch focuswindow 'class:^chrome-$APPID_GMAPS-.*$'        || $CHROMIUM --app-id=$APPID_GMAPS"
bind = $HYPER, p, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_PAPERLESS-'  && hyprctl dispatch focuswindow 'class:^chrome-$APPID_PAPERLESS-.*$'    || $CHROMIUM --app-id=$APPID_PAPERLESS"
bind = $HYPER, t, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_TODOIST-'    && hyprctl dispatch focuswindow 'class:^chrome-$APPID_TODOIST-.*$'      || $CHROMIUM --app-id=$APPID_TODOIST"
bind = $HYPER, w, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_WHATSAPP-'   && hyprctl dispatch focuswindow 'class:^chrome-$APPID_WHATSAPP-.*$'     || $CHROMIUM --app-id=$APPID_WHATSAPP"
bind = $HYPER, x, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_GEMINI-'     && hyprctl dispatch focuswindow 'class:^chrome-$APPID_GEMINI-.*$'       || $CHROMIUM --app-id=$APPID_GEMINI"
bind = $HYPER, z, exec, sh -lc "$GREP 'class:[[:space:]]*chrome-$APPID_CHATGPT-'    && hyprctl dispatch focuswindow 'class:^chrome-$APPID_CHATGPT-.*$'      || $CHROMIUM --app-id=$APPID_CHATGPT"

# ========================= MAIN/SYSTEM ==============================
bind = CONTROL  , RETURN, exec, $terminal
bind = CONTROL  , space, exec, $menu
bind = CONTROL SHIFT    , 4, exec, hyprshot -m region --clipboard-only,

bind = $mainMod , RETURN, exec, $terminal
bind = $mainMod , space, exec, $menu

bind = $mainMod, TAB, focuscurrentorlast # also activated with tap-to-toggle (keyd config)
# bind = CONTROL, TAB, focuscurrentorlast # also activated with tap-to-toggle (keyd config)

bind = $mainMod, d, exec, $menu
# bind = $mainMod, b, exec, $fileManager
# bind = $mainMod, b, exec, sh -lc 'if systemctl --user --quiet is-active waybar.service; then systemctl --user stop waybar.service ; else systemctl --user start waybar.service; fi'
bind = $mainMod, f, fullscreenstate, 1
# bind = $mainMod, f, exec, ~/.config/hypr/scripts/toggle_fullscreen.sh
bind = $mainMod, j, togglesplit, # dwindle
bind = $mainMod, m, exec, ~/.config/hypr/scripts/confirm-exit.sh
bind = $mainMod, n, exec, alacritty -e nvim
bind = $mainMod, p, pseudo, # dwindle
bind = $mainMod, t, exec, alacritty -e btop
bind = $mainMod, v, togglefloating,
bind = $mainMod, w, killactive,
bind = $mainMod, x, overview:toggle,

# ========================= WINDOWS MANAGEMENT ==============================
# Move focus with mainMod + arrow keys
bind = $mainMod, left,  movefocus, l
bind = $mainMod, h,     movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, l,     movefocus, r
bind = $mainMod, up,    movefocus, u
bind = $mainMod, k,     movefocus, u
bind = $mainMod, down,  movefocus, d
bind = $mainMod, j,     movefocus, d

# Swap window with mainMod + Shift + arrow keys
bind = $mainMod SHIFT, left,    swapwindow, l
bind = $mainMod SHIFT, h,       swapwindow, l
bind = $mainMod SHIFT, right,   swapwindow, r
bind = $mainMod SHIFT, l,       swapwindow, r
bind = $mainMod SHIFT, up,      swapwindow, u
bind = $mainMod SHIFT, k,       swapwindow, u
bind = $mainMod SHIFT, down,    swapwindow, d
bind = $mainMod SHIFT, j,       swapwindow, d

# ------- Master Layout
# Promote focused window to master
bind = $mainMod, p, layoutmsg, swapwithmaster

# Cycle through stack
bind = $mainMod, bracketright, layoutmsg, cyclenext noloop
bind = $mainMod, bracketleft, layoutmsg, cycleprev noloop

# Cycle through workspace orientation
bind = $mainMod, o, layoutmsg, orientationcycle left right top

# ========================= WORKSPACE MANAGEMENT ==============================

# Switch to previous/next workspace
bind = $mainMod, comma, workspace, -1
bind = $mainMod, period, workspace, +1

# Move active window to previous/next workspace
bind = $mainMod SHIFT, comma, movetoworkspace, -1
bind = $mainMod SHIFT, period, movetoworkspace, +1

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume,  exec, wobctl vol:raise
# bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
# bindel = ,XF86AudioRaiseVolume, exec, swayosd-client --output-volume=raise

bindel = ,XF86AudioLowerVolume,  exec, wobctl vol:lower
# bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
# bindel = ,XF86AudioLowerVolume, exec, swayosd-client --output-volume=lower

bindel = ,XF86AudioMute,         exec, wobctl vol:toggle-mute
# bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
# bindel = ,XF86AudioMute, exec, swayosd-client --output-volume mute-toggle
# bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle

bindel = ,XF86MonBrightnessUp,   exec, wobctl br:raise
# bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
# bindel = ,XF86MonBrightnessUp, exec, swayosd-client --brightness=raise

bindel = ,XF86MonBrightnessDown, exec, wobctl br:lower
# bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-
# bindel = ,XF86MonBrightnessDown, exec, swayosd-client --brightness=lower

# Increase keyboard brightness
bind = $mainMod, XF86MonBrightnessUp, exec, brightnessctl -d kbd_backlight set +10%
# Decrease keyboard brightness
bind = $mainMod, XF86MonBrightnessDown, exec, brightnessctl -d kbd_backlight set 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous

# ====================== BATTERY SAVER MODE ========================
bind = $mainMod, F12, exec, ~/.config/hypr/scripts/visual-profile.sh --toggle

# ====================== ALT+TAB EMULATION ========================
exec-once = foot --server

# Alt+Tab (Windows-style with Alt-release inside rofi)
# bind = ALT, TAB,        exec, ~/.config/hypr/scripts/alttab/rofi-alt-tab.sh open-next
# bind = ALT SHIFT, TAB,  exec, ~/.config/hypr/scripts/alttab/rofi-alt-tab.sh open-prev

# TEST
bind = ALT, TAB,        exec, ~/.config/hypr/scripts/alttab/rofi-alt-tab-min.sh
bind = ALT SHIFT, TAB,  exec, ~/.config/hypr/scripts/alttab/rofi-alt-tab-min.sh

# Inject Return into rofi when Alt is released â†’ accept selection
# bindrt = ALT,       ALT_L, exec, hyprctl -q dispatch sendshortcut , return, class:^(Rofi|rofi)$
# bindrt = ALT SHIFT, ALT_L, exec, hyprctl -q dispatch sendshortcut , return, class:^(Rofi|rofi)$
# bindrt = ALT,       ALT_R, exec, hyprctl -q dispatch sendshortcut , return, class:^(Rofi|rofi)$
# bindrt = ALT SHIFT, ALT_R, exec, hyprctl -q dispatch sendshortcut , return, class:^(Rofi|rofi)$
