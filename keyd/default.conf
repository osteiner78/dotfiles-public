# NOTE: The panic sequence *<backspace>+<escape>+<enter>* will force keyd to terminate.

# https://www.karimarttila.fi/keyboard/2023/11/16/linux-keyboard-configuration-with-keyd.html

### NOTE:
# This file needs to be in:
# /etc/keyd/default.conf

### HELP SECTION BEGIN ###

# Web site: https://github.com/rvaiya/keyd

##### KEYD #################
# When you edit /etc/keyd/default.conf file:
# cd /etc/keyd
# cn # Open VSCode
# In another terminal:
# sudo journalctl -eu keyd -f
# ... this way you immediately see if there is some error,
# when you load new configuration (after saving the file):
# sudo keyd reload
# Finally when you are ready, in the /etc/keyd: add changes to git.

# Find keys with tool:
# sudo keyd monitor

# List keys that you can use with keyd:
# sudo keyd list-keys

# Modifiers:
# C - Control++
# M - Meta/Super++
# A - Alt++h
# S - Shift++
# G - AltGr

### HELP SECTION END ###


###### KEYBOARD IDENTIFICATIONS #####
# NOTE: Later on if you find out that some configuration does not work on Dygma vs Laptop keyboard,
# you can use separate ids sections.
[ids]

*
[global]
layer_indicator=0


###### MAIN #####
[main]
# Hyperkey: Meta+Alt+Control+Shift
capslock = overload(hyper, esc)

# Create a new "Cmd" button, with various Mac OS-like features below
leftmeta = layer(meta_mac_left)
# Left super: Mostly super key
rightmeta = layer(meta_mac_right)

# Mission Control key in Macbook Pro keyboard
scale = M-a

# Hyperkey layer
[hyper:M-A-C-S]



# meta_mac modifier layer; inherits from 'Ctrl' modifier layer
# The main part! Using this layer, we can remap our new "Cmd" key to =
# do almost everything our muscle memory might need...
[meta_mac_left:C]
# Move cursor to beginning of line
left = home
# Move cursor to end of Line
right = end

# Switch directly to an open tab (e.g. Firefox, VS code)
1 = A-1
2 = A-2
3 = A-3
4 = A-4
5 = A-5
6 = A-6
7 = A-7
8 = A-8
9 = A-9

# VSCode
/ = C-/

# As soon as tab is pressed (but not yet released), we switch to the
# "app_switch_state" overlay where we can handle Meta-Backtick differently.
# Also, send a 'M-tab' key tap before entering app_switch_sate.
tab = swapm(app_switch_state, M-tab)

# Meta-Backtick: Switch to next window in the application group
# - A-f6 is the default binding for 'cycle-group' in gnome
# - keybinding: `gsettings get org.gnome.desktop.wm.keybindings cycle-group`
` = A-f6


# app_switch_state modifier layer; inherits from 'Meta' modifier layer
[app_switch_state:M]

# Meta-Tab: Switch to next application
# - keybinding: `gsettings get org.gnome.desktop.wm.keybindings switch-applications`
tab = M-tab
right = M-tab

# Meta-Backtick: Switch to previous application
# - keybinding: `gsettings get org.gnome.desktop.wm.keybindings switch-applications-backward`
` = M-S-tab
left = M-S-tab


# Right command key acts mostly like Meta/Super with some specific modifications (in right side of keyboard)
[meta_mac_right:M]
# c = C-c
# v = C-v
# x = C-x
/ = C-/
\ = C-\
- = C--
= = C-=
l = C-l

[meta_mac_right+shift]
# Previous tab in Firefox
[ = C-S-tab
# Next tab in Firefox
] = C-tab
